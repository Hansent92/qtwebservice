/*! \page tutorial3 Tutorial
\brief Part 3

There are quite a lot of options to choose from. Let's have a quick look through them all:
a) use QWebMethod or QWebServiceMethod to represent single web methods in a web API,
b) use QWsdl to extract a list of QWebMethods and some basic web service data,
c) use QWebService as a central point for communication - even when no WSDL file is available.

All options have some advantges, I'll proceed with more detailed description for various use cases. For details on usage, refer to other tutorials or official documentation:

1. QWebMethod/ QWebServiceMethod.
QWebMethod is probably the most important class in the whole QWebService library. It can be used for asynchronous communication with web services (synchronous methods are also available, but in QWebServiceMethod) using variety of protocols (SOAP, JSON). When used alone, you have to specify all the relevant details (URL, HTTP method, protocol to use). If you go for QWsdl (or QWebService with WSDL file), the library will do all the setting up automatically for you.

2. QWsdl.
QWsdl is a WSDL file parser. If the serwer you want to communicate with is SOAP-based and has WSDL definition (most .NET web services), you can use the URL of WSDL file (QWsdl can also read files from local paths). QWsdl will extract information from this file and populate it's internal list of QWebMethods.

You can then access for example web service's name, or get the QMap containing QWebMethods. All QWebMethods are already fully configured and ready to use.

3. QWebService.
QWebService is a step forward from QWsdl. It can use a WSDL file, but you have much  more freedom here - you can add and remove QWebMethods at will, gather more information about web methods you have at your disposal (like names of their parameters). Usage without specifying any WSDL file is also fully supported. This means that you can use QWebService to create custom web APIs reader - even one with mixed JSON/ WSDL support.
*/